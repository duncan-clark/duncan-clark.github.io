theme(strip.text.x = element_text(size = 15),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
axis.text.x = element_blank(),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))+
labs(colour= "Number of\nNeighbors\nwith Law") +
coord_cartesian(ylim = c(0,0.2)) +
ggtitle("")
plot
plot = plot_model(model,
type = "pred",
terms = c("backs_normalised_r [all]",
"neighbor_enact_r",
"Number of Permissive Laws in Receiver State [0,3,6]"),
vcov.fun = vcovCL,
vcov.args = list(cluster = as.formula(cluster_form), type = NULL, sandwich = TRUE),
condition = c(t = 5),
)
plot$data$facet <- as.factor(sapply(as.character(plot$data$facet),function(s){
if(s== "Number of Permissive Laws in Receiver State = 0"){
return("Permissive firearm laws = 0")
}
if(s== "Number of Permissive Laws in Receiver State = 1"){
return("Permissive firearm laws = 1")
}
if(s== "Number of Permissive Laws in Receiver State = 2"){
return("Permissive firearm laws = 2")
}
}))
sapply(as.character(plot$data$facet),function(s){
if(s== "Number of Permissive Laws in Receiver State = 0"){
return("Permissive firearm laws = 0")
}
if(s== "Number of Permissive Laws in Receiver State = 1"){
return("Permissive firearm laws = 1")
}
if(s== "Number of Permissive Laws in Receiver State = 2"){
return("Permissive firearm laws = 2")
}
})
plot = plot_model(model,
type = "pred",
terms = c("backs_normalised_r [all]",
"neighbor_enact_r",
"Number of Permissive Laws in Receiver State [0,3,6]"),
vcov.fun = vcovCL,
vcov.args = list(cluster = as.formula(cluster_form), type = NULL, sandwich = TRUE),
condition = c(t = 5),
)
plot$data$facet <- as.factor(sapply(as.character(plot$data$facet),function(s){
if(s== "Number of Permissive Laws in Receiver State = 0"){
return("Permissive firearm laws = 0")
}
if(s== "Number of Permissive Laws in Receiver State = 3"){
return("Permissive firearm laws = 3")
}
if(s== "Number of Permissive Laws in Receiver State = 6"){
return("Permissive firearm laws = 6")
}
}))
plot <- plot +
ylab("Predicted probability of law adoption") +
xlab("Background Checks Per Capita") +
theme_bw() +
theme(strip.text.x = element_text(size = 15),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
axis.text.x = element_blank(),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))+
labs(colour= "Number of\nNeighbors\nwith Law") +
coord_cartesian(ylim = c(0,0.2)) +
ggtitle("")
plot
help(ggsve)
help(ggsave)
getpwd()
getcwd()
getwd()
ggsave(device='tiff', dpi=700)
ggsave(tmp,device='tiff', dpi=700)
ggsave("tmp",device='tiff', dpi=700)
ggsave("tmp",device='png', dpi=700)
ggsave("tmp.png",device='png', dpi=700)
plot <- plot +
ylab("Predicted probability of law adoption") +
xlab("Background Checks Per Capita") +
theme_bw() +
theme(strip.text.x = element_text(size = 15),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
#axis.text.x = element_blank(),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))+
labs(colour= "Number of\nNeighbors\nwith Law") +
coord_cartesian(ylim = c(0,0.2)) +
ggtitle("")
plot
plot$data$x
help("plot_model")
plot$data
plot$data$facet
plot$data$x
hist(plot$data$x)
plot = plot_model(model,
type = "pred",
terms = c("backs_normalised_r [all]",
"neighbor_enact_r",
"Number of Permissive Laws in Receiver State [0,3,6]"),
vcov.fun = vcovCL,
vcov.args = list(cluster = as.formula(cluster_form), type = NULL, sandwich = TRUE),
condition = c(t = 5),
)
plot$data$facet <- as.factor(sapply(as.character(plot$data$facet),function(s){
if(s== "Number of Permissive Laws in Receiver State = 0"){
return("Permissive firearm laws = 0")
}
if(s== "Number of Permissive Laws in Receiver State = 3"){
return("Permissive firearm laws = 3")
}
if(s== "Number of Permissive Laws in Receiver State = 6"){
return("Permissive firearm laws = 6")
}
}))
plot$data$x = plot$data$x*sd(tmp$backs_normalised_r) + mean(tmp$backs_normalised_r)
plot <- plot +
ylab("Predicted probability of law adoption") +
xlab("Background Checks Per Capita") +
theme_bw() +
theme(strip.text.x = element_text(size = 15),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
#axis.text.x = element_blank(),
axis.text.x =
axis.title.x = element_text(size = 20),
plot
plot$data$x = plot$data$x*sd(tmp$backs_normalised_r) + mean(tmp$backs_normalised_r)
plot <- plot +
ylab("Predicted probability of law adoption") +
xlab("Background Checks Per Capita") +
theme_bw() +
theme(strip.text.x = element_text(size = 15),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
#axis.text.x = element_blank(),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))+
labs(colour= "Number of\nNeighbors\nwith Law") +
coord_cartesian(ylim = c(0,0.2)) +
ggtitle("")
plot
plot$data
plot$scales
plot$data$x
plot = plot_model(model,
type = "pred",
terms = c("backs_normalised_r [all]",
"neighbor_enact_r",
"Number of Permissive Laws in Receiver State [0,3,6]"),
vcov.fun = vcovCL,
vcov.args = list(cluster = as.formula(cluster_form), type = NULL, sandwich = TRUE),
condition = c(t = 5),
)
plot$data$facet <- as.factor(sapply(as.character(plot$data$facet),function(s){
if(s== "Number of Permissive Laws in Receiver State = 0"){
return("Permissive firearm laws = 0")
}
if(s== "Number of Permissive Laws in Receiver State = 3"){
return("Permissive firearm laws = 3")
}
if(s== "Number of Permissive Laws in Receiver State = 6"){
return("Permissive firearm laws = 6")
}
}))
plot$data$x = plot$data$x*sd(tmp$backs_normalised_r) + mean(tmp$backs_normalised_r)
plot <- plot +
ylab("Predicted probability of law adoption") +
xlab("Background Checks Per Capita") +
theme_bw() +
theme(strip.text.x = element_text(size = 15),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
#axis.text.x = element_blank(),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))+
labs(colour= "Number of\nNeighbors\nwith Law") +
coord_cartesian(ylim = c(0,0.2)) +
ggtitle("")
plot
plot <- plot +
ylab("Predicted probability of law adoption") +
xlab("Background Checks Per Capita") +
theme_bw() +
theme(strip.text.x = element_text(size = 15),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
axis.text.x = element_blank(),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))+
labs(colour= "Number of\nNeighbors\nwith Law") +
coord_cartesian(ylim = c(0,0.2)) +
ggtitle("")
plot
plot_model
plot_model
plot
plot = plot_model(model,
type = "pred",
terms = c("backs_normalised_r [all]",
"neighbor_enact_r",
"Number of Permissive Laws in Receiver State [0,3,6]"),
vcov.fun = vcovCL,
vcov.args = list(cluster = as.formula(cluster_form), type = NULL, sandwich = TRUE),
condition = c(t = 5),
)
plot
plot$data$predicted
plot$data$conf.low
plot$data$facet
plot$data$conf.low
plot$data[plot$facet==3,]
plot$facet
plot$data$facet
plot$data$facet==1
plot$data$facet==2
plot$data$facet
plot$data$facet=='Number of Permissive Laws in Receiver State = 3 Number of Permissive Laws in Receiver State = 6'
as.numeric(plot$data$facet)
as.numeric(plot$data$facet) ==3
plot$data[as.numeric(plot$data$facet)==3,]
dat_dyadic_EHA$backs_normalised_r
hist(dat_dyadic_EHA$backs_normalised_r)
summary(dat_dyadic_EHA$backs_normalised_r))
summary(dat_dyadic_EHA$backs_normalised_r)
help(plot_model)
plot = plot_model(model,
type = "pred",
terms = c("backs_normalised_r [-2,2]",
"neighbor_enact_r",
"Number of Permissive Laws in Receiver State [0,3,6]"),
vcov.fun = vcovCL,
vcov.args = list(cluster = as.formula(cluster_form), type = NULL, sandwich = TRUE),
condition = c(t = 5),
)
plot$data$facet <- as.factor(sapply(as.character(plot$data$facet),function(s){
if(s== "Number of Permissive Laws in Receiver State = 0"){
return("Permissive firearm laws = 0")
}
if(s== "Number of Permissive Laws in Receiver State = 3"){
return("Permissive firearm laws = 3")
}
if(s== "Number of Permissive Laws in Receiver State = 6"){
return("Permissive firearm laws = 6")
}
}))
plot <- plot +
ylab("Predicted probability of law adoption") +
xlab("Background Checks Per Capita") +
theme_bw() +
theme(strip.text.x = element_text(size = 15),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
axis.text.x = element_blank(),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))+
labs(colour= "Number of\nNeighbors\nwith Law") +
coord_cartesian(ylim = c(0,0.2)) +
ggtitle("")
plot
plot
plot <- plot +
ylab("Predicted probability of law adoption") +
xlab("Background Checks Per Capita") +
theme_bw() +
theme(
#strip.text.x = element_text(size = 15),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
#axis.text.x = element_blank(),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))+
labs(colour= "Number of\nNeighbors\nwith Law") +
coord_cartesian(ylim = c(0,0.2)) +
ggtitle("")
plot
dat_dyadic_EHA$backs_normalised_r
# load in the data:
load("C:/Users/Duncan/Documents/Academics/UCLA_Academics/Firearms_GSR/processed_data/processed_punitive_preemption.RData")
# State-Year EHA :
# Process the data
dat_pun$squire <- as.numeric(dat_pun$squire)
dat_EHA <- dat_pun %>%
group_by(state) %>%
mutate(first_year = min(year[pun_preempt ==1]))%>%
filter(year <= first_year)%>%
ungroup()
dat_EHA <- dat_EHA %>%
mutate(y = pun_preempt,
t = year - min(year)) %>%
mutate(t_squared = t**2)
# Standardize numeric variables:
dat_EHA <- dat_EHA %>%
mutate_at(c('squire',
"unemp_rate",
'male_risk_group_perc',
'citizen',
'government',
'income',
'homs',
'population',
'backs_normalised'),
~(scale(.) %>% as.vector))
# Dyadic EHA :
# process to dyadic format :
receivers = unique(dat_pun$state)
senders = receivers
years = unique(dat_pun$year)
dat_dyadic = data.frame(receivers = rep(receivers,each = length(receivers)),
senders = rep(senders,times = length(senders)))
dat_dyadic = lapply(1:length(years),function(i){
tmp <- dat_dyadic
tmp$year = years[i]
return(tmp)
})
dat_dyadic = do.call(rbind,dat_dyadic)
dim(dat_dyadic)
# now add on receiver and sender covariates:
dat_dyadic <- dat_dyadic %>%
left_join(dat_pun %>% select(pun_preempt,state,squire,unemp_rate,year,
male_risk_group_perc, trifecta, citizen,
government, income, homs,
population, backs_normalised, neighbor_enact, total_enact, FPS,
perm_counts,rest_counts,
Region, Division, Division_name,
Region_name),by = c("receivers" = "state","year"))
dat_dyadic <- dat_dyadic %>%
left_join(dat_pun %>% select(pun_preempt,state,squire,unemp_rate,year,
male_risk_group_perc, trifecta, citizen,
government, income, homs,
population, backs_normalised, neighbor_enact, total_enact, FPS,
perm_counts,rest_counts,
Region, Division, Division_name,
Region_name),by = c("senders" = "state","year"),suffix = c("_r","_s"))
dat_dyadic <- dat_dyadic %>%
filter(receivers != senders) %>%
group_by(receivers) %>%
mutate(first_year = min(year[pun_preempt_r ==1]))%>%
filter(year <= first_year) %>%
ungroup()
dim(dat_dyadic)
# change the trifecta to be undirected:
dat_dyadic$trifecta_r = (dat_dyadic$trifecta_r !=0)
dat_dyadic$trifecta_s = (dat_dyadic$trifecta_s !=0)
# add the difference statistics:
dat_dyadic <- dat_dyadic %>%
mutate(squire_diff = squire_r-squire_s,
unemp_rate_diff = unemp_rate_r - unemp_rate_s,
male_risk_group_perc_diff = male_risk_group_perc_r - male_risk_group_perc_s,
citizen_diff = citizen_r - citizen_s,
government_diff = government_r - government_s,
income_diff = income_r - income_s,
homs_diff = homs_r - homs_s,
population_diff = population_r - population_s,
backs_normalised_diff = backs_normalised_r - backs_normalised_s,
perm_counts_diff = perm_counts_r - perm_counts_s,
rest_counts_diff = rest_counts_r - rest_counts_s)
dat_dyadic_EHA <- dat_dyadic %>%
mutate(y = pun_preempt_r*pun_preempt_s,
t = year - min(year)) %>%
mutate(t_squared = t**2)
dat_dyadic_EHA_raw = dat_dyadic_EHA
dat_dyadic_EHA <- dat_dyadic_EHA %>%
mutate_at(c('squire_r',
'squire_s',
'squire_diff',
'unemp_rate_r',
'unemp_rate_s',
'unemp_rate_diff',
'male_risk_group_perc_r',
'male_risk_group_perc_s',
'male_risk_group_perc_diff',
'citizen_r',
'citizen_s',
'citizen_diff',
'government_r',
'government_s',
'government_diff',
'income_r',
'income_s',
'income_diff',
'homs_r',
'homs_s',
'homs_diff',
'population_r',
'population_s',
'population_diff',
'backs_normalised_r',
'backs_normalised_s',
'backs_normalised_diff'),
~(scale(.) %>% as.vector))
tmp = dat_dyadic_EHA_raw %>%
select(government_r,
government_s,
neighbor_enact_r,
income_r,
income_s,
squire_r,
squire_s,
homs_r,
homs_s,
backs_normalised_r,
backs_normalised_s,
population_r,
population_s,
citizen_r,
citizen_s,
unemp_rate_r,
unemp_rate_s,
perm_counts_r,
perm_counts_s,
y,
t)
tmp <- tmp %>% rename(
"Number of Permissive Laws in Receiver State" = "perm_counts_r"
)
model <- glm(y ~ .,
data = tmp,
family = binomial(link='logit'))
plot = plot_model(model,
type = "pred",
terms = c("backs_normalised_r [all]",
"neighbor_enact_r",
"Number of Permissive Laws in Receiver State [0,3,6]"),
vcov.fun = vcovCL,
vcov.args = list(cluster = as.formula(cluster_form), type = NULL, sandwich = TRUE),
condition = c(t = 5),
)
plot$data$facet <- as.factor(sapply(as.character(plot$data$facet),function(s){
if(s== "Number of Permissive Laws in Receiver State = 0"){
return("Permissive firearm laws = 0")
}
if(s== "Number of Permissive Laws in Receiver State = 3"){
return("Permissive firearm laws = 3")
}
if(s== "Number of Permissive Laws in Receiver State = 6"){
return("Permissive firearm laws = 6")
}
}))
plot <- plot +
ylab("Predicted probability of law adoption") +
xlab("Background Checks Per Capita") +
theme_bw() +
theme(
#strip.text.x = element_text(size = 15),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
#axis.text.x = element_blank(),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))+
labs(colour= "Number of\nNeighbors\nwith Law") +
coord_cartesian(ylim = c(0,0.2)) +
ggtitle("")
plot
plot <- plot +
ylab("Predicted probability of law adoption") +
xlab("Background Checks Per Capita") +
theme_bw() +
theme(
strip.text.x = element_text(size = 15),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
#axis.text.x = element_blank(),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20))+
labs(colour= "Number of\nNeighbors\nwith Law") +
coord_cartesian(ylim = c(0,0.2)) +
ggtitle("")
plot
plot$data[as.numeric(plot$data$facet)==3,]
dat_dyadic_EHA[order(backs_normalized_r),
]
dat_dyadic_EHA[order(dat_dyadic_EHA$backs_normalized_r),]
dat_dyadic_EHA[order(dat_dyadic_EHA$backs_normalised_r),]
help(order)
dat_dyadic_EHA[order(dat_dyadic_EHA$backs_normalised_r,decreasing = TRUE),]
dat_dyadic_EHA[order(dat_dyadic_EHA$backs_normalised_r,decreasing = TRUE),]$receivers
plot$data[as.numeric(plot$data$facet)==3,]
ggsave("tmp.png",device='png', dpi=700)
getcwd()
getpwd()
cwd
pwd
getwd()
source("G:/Other computers/My Laptop/Documents/duncan-clark.github.io/R/build.R")
source("G:/Other computers/My Laptop/Documents/duncan-clark.github.io/R/build.R")
setwd("G:/Other computers/My Laptop/Documents/duncan-clark.github.io/")
source('~/duncan-clark.github.io/R/build.R', echo=TRUE)
source('~/R/build.R', echo=TRUE)
getwd()
source('/R/build.R', echo=TRUE)
source('R/build.R', echo=TRUE)
install.packages("blogdown")
install.packages("blogdown")
Sys.getenv("HOME")
candidates <- c( Sys.getenv("R_PROFILE"),
file.path(Sys.getenv("R_HOME"), "etc", "Rprofile.site"),
Sys.getenv("R_PROFILE_USER"),
file.path(getwd(), ".Rprofile"),
file.path(Sys.getenv("HOME"), ".Rprofile"))
Filter(file.exists, candidates)
install.packages("blogdown")
