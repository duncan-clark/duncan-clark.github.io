names(returns) <- names
#add the min date
returns <- lapply(returns,function(x){
x$min_date <- min(x$returns$date,na.rm = TRUE)
return(x)
})
return(returns)
}
returns_stocks <- read_stocks(file)
#read in ETFs
read_etfs <- function(file){
sheets <- excel_sheets(file)
data <- lapply(sheets,function(x){read_excel(file,sheet = x,skip = 1)})
names(data) <- sapply(sheets,function(x){gsub(" ","",x)})
#gets asset classes by looking for sheet names with less than 8 characters
#uses closing price for now
assets <- sapply(names(data),function(x){
last <- substr(x,nchar(x)-2,nchar(x))
return(last == toupper(last))
})
assets <- names(data)[which(assets)]
returns <- lapply(assets,function(x){
tmp <- as.data.frame(eval(parse(text = paste("data$`",x,"`",sep="")))[,1:6])
names(tmp) <- c("name","Date","Close","div","vol_30","vol_360")
returns <- tmp$Close[-1]/tmp$Close[-length(tmp$Close)]- 1
divs <- tmp$div[-1]
min_date <- tmp$Date[2]
date <- as.Date(tmp$Date[-1])
returns <- data.frame(returns = returns,date = date,div_12 = divs)
return(list(returns = returns,min_date = min_date))})
#Rename the assets with the ETF names
names(returns) <- assets
names(returns) <- sapply(assets,FUN = function(x){
tmp <- substr(x,nchar(x)-3,nchar(x))
if(tmp != toupper(tmp)){
tmp <- substr(x,nchar(x)-2,nchar(x))
}
if(tmp == "FGLD"){tmp <- "GLD"}
return(tmp)})
#Read in dividend yield and freq
data <- read_excel(file, sheet = "ETF Data Points")
#find the frequencies
freq <- data$`DVD Freq`
freq[freq == "Quarter" |freq == "quarter" |freq == "Quarterly" | freq == "quarter" ] <- 63
freq[freq == "Semi-Anl" |freq == "Semi Annual" |freq =="semi Annual" |freq == "Semi-anl" |freq == "semi-anl"] <- 126
freq[freq == "Monthly" |freq == "monthly" | freq == "Month" | freq == "month"] <- 21
freq[freq == "Annually" |freq == "anually" | freq == "anl" | freq == "Anl"| freq == "Annual"| freq=="annual"] <- 251
freq <- as.numeric(freq)
freq[is.na(freq)] <- 0
returns <- mapply(returns,names(returns),FUN = function(x,y){x$d <- freq[match(y,data$Ticker)]
return(x)},SIMPLIFY = FALSE)
# returns <- lapply(returns,function(x){
#   d <- x$d
#   if(d!=0){
#     x$returns <- x$returns[x$returns$div_12 != 0,]
#   }
#   return(x)
#   })
return(returns)
}
returns_etfs <- read_etfs(file)
returns <- c(returns_etfs,returns_stocks)
#remove duplicate dates
returns <- lapply(returns,function(x){
x$returns <- x$returns[!duplicated(x$returns$date),]
return(x)})
returns <- lapply(returns,function(x){
x$returns <- x$returns[!duplicated(x$returns$date),]
x$returns <- x$returns[x$returns$date >= as.Date("1970-01-01"),]
return(x)})
#Read in alloc function
read_alloc <- function(file,sheet){
data <- read_excel(file,sheet)
data <- data[4:dim(data)[1],c(4,seq(6,dim(data)[2]))]
#add cash in
data[1,1] <- "cash"
#remove row of totals
data <- data[-dim(data)[1],]
#make any nas into zeros in the allocation part
data[is.na(data)] <- 0
alloc <- function(risk = 0.5,
time = 0, #parameter from 0 to 1 : 1 being the end of the investment
time_end, #number of years investment goes for in total
assets = data[,1]){
#cut down data to time span of investment
allocations <- data[,seq(2,min(ceiling(time_end)+2,dim(data)[2]))]
#Use risk parameter to generate pseudo time, and then use time to pick portfolio:
#stop if risk is not in [0,1]
if(risk >1 | risk <0){stop("Risk parameter not between 0 and 1")}
if(time >1 | time <0){stop("Time parameter not between 0 and 1")}
#Use risk to gamma mapping as per Lu Flores
riskToGamma <- function(risk){
magnitude = 4
#map risk to -0.5, 0.5
adjustedRisk = risk - 0.5
#map risk to 2, -2
adjustedRisk = adjustedRisk*magnitude#*(-1)
#map risk from 4**2 to 4**(-2)
return(magnitude**adjustedRisk)
}
pseudo_time <- (1-time)**(riskToGamma(1-risk))
#map the number of years given to the risk interval [0,1]
times <- seq(0,dim(allocations)[2]-1)/(dim(allocations)[2]-1)
tmp <- times - pseudo_time
upper <- min(which(tmp>0))
lower <- max(which(tmp<0))
if(upper == Inf){upper <- lower +1}
if(lower == -Inf){lower <- upper -1}
if((upper - lower) ==2 & sum(tmp==0)!=0){upper <- upper -1}
if(upper > ceiling(time_end) +1){upper <- upper -1;lower <- lower-1}
if(lower < 0){upper <- upper +1;lower <- lower+1}
#print(upper)
#print(lower)
alloc <- allocations[,upper]*(pseudo_time - times[lower])/(tmp[upper] - tmp[lower]) + allocations[,lower]*(times[upper]- pseudo_time)/(tmp[upper] - tmp[lower])
alloc <- alloc[,1]
tmp <- cbind(alloc,assets)
alloc <- as.numeric(tmp[,1])
names(alloc) <- tmp[,2]
return(alloc)}
return(alloc)
}
alloc <- read_alloc(file,"Allocations")
#alloc(risk = 0.5,time =0,time_end = 20)
#alloc(risk = 0.5,time =1,time_end = 20)
#alloc(risk = 0.5,time =0.5,time_end = 20)
#alloc(risk = 0.7,time =0.5,time_end = 20)
#alloc(risk = 0.3,time =0.5,time_end = 20)
#make alloc do individual asset allocation:
alloc_ind <- function(risk,
time,
time_end)
{
etfs <- alloc(risk,time,time_end)
#number of assets for each ETF
tmp <- sapply(names(etfs),function(x){
if(x=="cash"){return(1)}else{
#print(x)
#print(names(returns))
tmp <- sum(unlist(sapply(names(returns),function(y){eval(parse(text=  paste(y,"$ETF",sep="")),envir = parent.frame(7)) == x})))
return(tmp)
}})
tmp <- 1/tmp
names(tmp) <- names(etfs)
allocation <- sapply(returns,function(x){
return(tmp[match(x$ETF,names(tmp))]*etfs[match(x$ETF,names(etfs))])})
allocation <- sapply(allocation,function(x){if(length(x)==0)return(0)else{return(x)}})
allocation <- as.numeric(unlist(allocation))
allocation <- c(etfs[1],allocation)
names(allocation) <- c("cash",names(returns))
allocation <- allocation[!is.na(allocation)]
return(allocation)
}
environment(model) <- environment()
#debug(model)
t_1<- proc.time()
test <- model(risk = risk,
conts = NULL,
conts_cadence = NULL,
date_start =date_start,
t_end = t_end,
assets = names(returns),
asset_returns = returns,
asset_alloc = alloc_ind,
activity_band = activity_band,
reinvest = FALSE,
goal = NULL,
init = 5000,
risk_offset = risk_offset,
cash_rebalance = FALSE)
t_2 <- proc.time()
print(t_2-t_1)
output <- output_process(test)
setwd(results_dir)
write.csv(output,file = paste("results_",results_name,sep=""))
return(list(output=output,returns = returns))
}
file <- "ETF Investment Subset - no links 05.25.19.xlsx"
dat_dir <- "C:/Users/Duncan/Documents/Clever_Alpha/models/model_2.2/data"
results_dir <- "C:/Users/Duncan/Documents/Clever_Alpha/models/model_2.2/results"
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
#make a new game
tmp <- new(game)
#check what the players have
tmp$getPlayer(1)$getMoney()
tmp$getPlayer(1)$getId()
tmp$getPlayer(1)$getCards()
tmp_card <- new(wheatfield)
tmp$getPlayer(1)$addCard(tmp_card)
tmp$getPlayer(1)$getCard()
tmp$getPlayer(1)$getCards()
tmp$getPlayer(1)$addCard(tmp_card)
tmp$getPlayer(1)$getCards()
tmp_player <- tmp$getPlayer(1)
tmp$player$getCards()
class(tmp$getPlayer())
class(tmp_player
)
tmp_player$getCards()
tmp_player$addCard(tmp_card)
tmp_player$getCards()
tmp$getPlayer(1)$getCards()
rm(list=ls())
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
#make a new game
tmp <- new(game)
#check what the players have
tmp$getPlayer(1)$getMoney()
tmp$getPlayer(1)$getId()
tmp$getPlayer(1)$getCards()
tmp_card <- new(wheatfield)
tmp$getPlayer(1)$addCard(tmp_card)
tmp$getPlayer(1)$getCards()
tmp$setPlayer(1,getPlayer(1)$addCard(tmp_card))
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
#make a new game
tmp <- new(game)
#check what the players have
tmp$getPlayer(1)$getMoney()
tmp$getPlayer(1)$getId()
tmp$getPlayer(1)$getCards()
tmp_card <- new(wheatfield)
tmp$setPlayer(1,getPlayer(1)$addCard(tmp_card))
tmp$setPlayer(1,tmp$getPlayer(1)$addCard(tmp_card))
tmp$getPlayer(1)$addCard(tmp_card)
tmp$getPlayer(1)$getCard(1)
rm(list=ls())
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
#make a new game
tmp <- new(game)
#check what the players have
tmp$getPlayer(1)$getMoney()
tmp$getPlayer(1)$getId()
tmp$getPlayer(1)$getCards()
tmp_card <- new(wheatfield)
tmp_card
tmp$getPlayer(1)$addCard(tmp_card)
p <- tmp$getPlayer(1)$addCard(tmp_card)
p
tmp$getPlayer(1)$addCard(tmp_card)
tmp$getPlayer(1)$getCards()
tmp$getPlayer(1)$addCard(tmp_card)
tmp$getPlayer(1)$getCards()
p <- tmp$getPlayer(1)
p$addCard(tmp_card)
p$getCards()
p <- tmp$getPlayer(1)
p$addCard(tmp_card)
p$getCards()
tmp$setPlayer(1,p)
tmp$getPlayer(1)$getCards()
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
rm(list=ls())
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
tmp <- new(wheatfield)
tmp$getPayoff()
tmp$getCost()
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
tmp <- new(bakery)
tmp$getPayoff()
tmp <- new(player)
tmp <- new(gamw)
tmp <- new(game)
tmp$getPlayer(1)
tmp$getPlayer(1)$getCards()
tmp$getPlayer(1)$getCardNames()
help(.prepModelTerms)
rm(list=ls())
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp/module.cpp')
tmp <- new(gameTurn,c("wheatfield"),c(10),c("random","random"))
class(gameTurn)
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
tmp <- new(wheatfield)
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
tmp <- new(game,c("wheatfield"),c(10),c("random","random"))
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
tmp <- new(game,c("wheatfield"),c(10),c("random","random"))
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
tmp <- new(game,c("wheatfield"),c(10),c("random","random"))
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
rm(list=ls())
help(rgamma)
tmp <- rgamma(100,1,100)
hist(tmp)
tmp <- rgamma(100,1,10)
hist(tmp)
tmp <- rgamma(100,1,15)
tmp <- rgamma(10000,1,15)
hist(tmp)
tmp <- rbeta(100,1,1)
hist(tmp)
help(rbeta)
tmp <- rbeta(100,1,10)
hist(tmp)
tmp <- rbeta(100,0.1,10)
hist(tmp)
tmp <- rbeta(100,5,10)
hist(tmp)
tmp <- rbeta(100,0.5,0.5)
hist(tmp)
tmp <- rbeta(10000,0.5,0.5)
hist(tmp)
tmp <- rgamma(10000,1,15)
hist(tmp)
tmp <- rgamma(10000,1,0.5)
hist(tmp)
tmp <- rgamma(10000,1,0.5)
hist(tmp)
vline(mean(tmp))
abline(mean(tmp))
help(abline)
help(hline)
abline(v=median(tmp))
abline(v=median(tmp),color = "blue")
abline(v=median(tmp),fill = "blue")
help(abline)
abline(v=median(tmp),col = "blue")
tmp <- rgamma(10000,1,0.5)
hist(tmp)
abline(v=median(tmp),col = "blue")
abline(v=mean(tmp),col = "red")
tmp <- rgamma(10000,1,0.5)
hist(tmp)
title("")
abline(v=median(tmp),col = "blue")
abline(v=mean(tmp),col = "red")
tmp <- rgamma(10000,1,0.5)
hist(tmp,main = "Right Skewed Distribution"
abline(v=median(tmp),col = "blue")
abline(v=mean(tmp),col = "red")
tmp <- rgamma(10000,1,0.5)
hist(tmp,main = "Right Skewed Distribution"
abline(v=median(tmp),col = "blue")
abline(v=mean(tmp),col = "red")
tmp <- rgamma(10000,1,0.5)
hist(tmp,main = "Right Skewed Distribution")
abline(v=median(tmp),col = "blue")
abline(v=mean(tmp),col = "red")
tmp <- rbeta(100,5,1)
hist(tmp)
tmp <- rbeta(10000,5,1)
hist(tmp,main = "Left Skewed Distribution")
abline(v=median(tmp),col = "blue")
abline(v=mean(tmp),col = "red")
tmp <- rnorm(10000,20,10)
tmp <- rnorm(10000,0,10)
hist(tmp,main = "Symmetric Normal Distribution sd = 10")
tmp <- rnorm(10000,0,10)
hist(tmp,main = "Symmetric Normal Distribution sd = 10")
tmp <- rbeta(10000,0.5,0.5)
hist(tmp, main = "multimodal distribution")
tmp <- rnorm(10000,0,10)
hist(tmp,main = "Symmetric Normal Distribution sd = 10")
tmp <- rnorm(10000,0,10)
hist(tmp,main = "Symmetric Normal Distribution sd = 1")
tmp <- rgamma(10000,1,0.5)
hist(tmp,main = "Right Skewed Distribution")
abline(v=median(tmp),col = "blue")
abline(v=mean(tmp),col = "red")
tmp <- rbeta(10000,5,1)
hist(tmp,main = "Left Skewed Distribution")
abline(v=median(tmp),col = "blue")
abline(v=mean(tmp),col = "red")
tmp <- rbeta(10000,0.5,0.5)
hist(tmp, main = "Multimodal Distribution")
tmp <- rnorm(10000,5,10)
hist(tmp,main = "Symmetric Normal Distribution sd = 1")
tmp <- rnorm(10000,0,1)
hist(tmp,main = "Symmetric Normal Distribution sd = 1")
tmp <- rnorm(10000,5,10)
hist(tmp,main = "Symmetric Normal Distribution sd = 1")
tmp <- rnorm(10000,5,1)
hist(tmp,main = "Symmetric Normal Distribution sd = 1")
rm(list=ls())
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
tmp <- new(game,c("wheatfield"),c(10),c("random","random"))
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(2)
tmp$getPlayerMoney(2)
tmp$getPlayerMoney(2)
tmp$getPlayerMoney(2)
tmp <- new(game,c("wheatfield"),c(10),c("random","random"))
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
rm(tmp)
tmp <- new(game,c("wheatfield"),c(10),c("random","random"))
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
help(new)
restart()
.rs.restartR()
rm(list=ls())
.rs.restartR()
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
tmp <- new(game,c("wheatfield"),c(10),c("random","random"))
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(2)
tmp$getPlayerMoney(2)
tmp$getPlayerMoney(2)
tmp <- new(game,c("wheatfield"),c(10),c("random","random"))
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(2)
tmp$getPlayerMoney(2)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
tmp$getPlayerMoney(1)
rm(list=ls())
.rs.ResartR()
.rs.RestartR()
.rs.restartR()
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
tmp <- new(game,c("wheatfield","ranch"),c(10),c("random","random"))
tmp$turn(1,1)
tmp$turn(1,1)
tmp$turn(1,1)
tmp$turn(1,1)
rm(list=ls())
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_2/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_3/module.cpp')
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_3/module.cpp')
rm(list=ls90)
rm(list=ls())
Rcpp::sourceCpp('Academics/R/R_Projects/Machi_Koro_Sim_Cpp_3/module.cpp')
tmp <- list()
length(tmp)
length(tmp) <- 10
tmp
install.packages("kableExtra")
install.packages(statnet)
install.packages("statnet")
install.packages("network")
install.packages("statnet")
update.packages("statnet")
install.packages("network")
library("kableExtra")
library("statnet")
library("devtools")
library("pkgbuild")
library("lolog")
library("captioner")
library("ggplot2")
library("plyr")
update.packages("network")
library("kableExtra")
library("statnet")
library("devtools")
library("pkgbuild")
library("lolog")
library("captioner")
library("ggplot2")
library("plyr")
library(lolgo)
library(lolog)
setwd("C:/Users/Duncan/Documents/duncan-clark2.github.io")
source('~/duncan-clark2.github.io/R/build.R', echo=TRUE)
